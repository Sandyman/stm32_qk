//$file${Src::accel.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: blink.qm
// File:  ${Src::accel.cpp}
//
// This code has been generated by QM 5.2.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${Src::accel.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "accel.hpp"
#include "bsp.hpp"
#include "events.hpp"
#include "utils.hpp"

Q_DEFINE_THIS_FILE

enum
{
   HIGH_WATERMARK_SIG = MAX_PUB_SIG,
   TILT_SIG,
   WAKE_UP_SIG,
   BACK_TO_SLEEP_SIG
};

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Components::Accel::Accel} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Components::Accel::Accel} ................................................
Accel Accel::inst;

//${Components::Accel::Accel::Accel} .........................................
Accel::Accel()
 : QActive(&initial),
   _TimeEvt(this, TIMEOUT_SIG, 0U)
{}

//${Components::Accel::Accel::SM} ............................................
Q_STATE_DEF(Accel, initial) {
    //${Components::Accel::Accel::SM::initial}
    subscribe(ACCEL_DMA_RX_DONE_SIG);
    subscribe(ACCEL_INT_SIG);
    return tran(&power_up);
}

//${Components::Accel::Accel::SM::accel} .....................................
Q_STATE_DEF(Accel, accel) {
    QP::QState status_;
    switch (e->sig) {
        //${Components::Accel::Accel::SM::accel::ACCEL_INT}
        case ACCEL_INT_SIG: {
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${Components::Accel::Accel::SM::accel::power_up} ...........................
Q_STATE_DEF(Accel, power_up) {
    QP::QState status_;
    switch (e->sig) {
        //${Components::Accel::Accel::SM::accel::power_up}
        case Q_ENTRY_SIG: {
            BSP::Accel.PowerUp();

            _TimeEvt.armX(msec(150));
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Components::Accel::Accel::SM::accel::power_up}
        case Q_EXIT_SIG: {
            _TimeEvt.disarm();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Components::Accel::Accel::SM::accel::power_up::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = tran(&initialise);
            break;
        }
        default: {
            status_ = super(&accel);
            break;
        }
    }
    return status_;
}

//${Components::Accel::Accel::SM::accel::initialise} .........................
Q_STATE_DEF(Accel, initialise) {
    QP::QState status_;
    switch (e->sig) {
        //${Components::Accel::Accel::SM::accel::initialise}
        case Q_ENTRY_SIG: {
            BSP::Accel.Initialise();

            _TimeEvt.armX(msec(50));
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Components::Accel::Accel::SM::accel::initialise}
        case Q_EXIT_SIG: {
            _TimeEvt.disarm();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Components::Accel::Accel::SM::accel::initialise::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = tran(&idle);
            break;
        }
        default: {
            status_ = super(&accel);
            break;
        }
    }
    return status_;
}

//${Components::Accel::Accel::SM::accel::idle} ...............................
Q_STATE_DEF(Accel, idle) {
    QP::QState status_;
    switch (e->sig) {
        //${Components::Accel::Accel::SM::accel::idle::ACCEL_INT}
        case ACCEL_INT_SIG: {
            /*
             * An interrupt was received
             * from the accelerometer.
             */
            status_ = tran(&handle_irq);
            break;
        }
        default: {
            status_ = super(&accel);
            break;
        }
    }
    return status_;
}

//${Components::Accel::Accel::SM::accel::active} .............................
Q_STATE_DEF(Accel, active) {
    QP::QState status_;
    switch (e->sig) {
        //${Components::Accel::Accel::SM::accel::active::HIGH_WATERMARK}
        case HIGH_WATERMARK_SIG: {
            status_ = tran(&high_watermark);
            break;
        }
        //${Components::Accel::Accel::SM::accel::active::TILT}
        case TILT_SIG: {
            status_ = tran(&tilt);
            break;
        }
        default: {
            status_ = super(&accel);
            break;
        }
    }
    return status_;
}

//${Components::Accel::Accel::SM::accel::active::handle_irq} .................
Q_STATE_DEF(Accel, handle_irq) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&active);
            break;
        }
    }
    return status_;
}

//${Components::Accel::Accel::SM::accel::active::high_watermark} .............
Q_STATE_DEF(Accel, high_watermark) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&active);
            break;
        }
    }
    return status_;
}

//${Components::Accel::Accel::SM::accel::active::tilt} .......................
Q_STATE_DEF(Accel, tilt) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&active);
            break;
        }
    }
    return status_;
}
//$enddef${Components::Accel::Accel} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Components::Accel::AO_Accel} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Components::Accel::AO_Accel} .............................................
QP::QActive * const AO_Accel  = &Accel::inst;
//$enddef${Components::Accel::AO_Accel} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
